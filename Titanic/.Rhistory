ylab("Total Count");
ggplot(train, aes(y=Fare,x="")) + geom_boxplot();
ggplot(train, aes(x = Fare, fill = factor(Survived))) +
geom_density( position="stack") +
xlab("Fare") +
ylab("Total Count") +
labs(fill = "Survived")
levels(train$Cabin);
cabinLetter = ifelse(train$Cabin == "", NA, substr(train$Cabin,1,1));
cabinREs = gregexpr("\\d+",train$Cabin, perl=TRUE);
cnMatches = regmatches( train$Cabin, cabinREs);
cabinNumber = numeric(length(cnMatches));
for ( i in 1:length(cnMatches) ){
cabinNumber[i] = mean( as.numeric( unlist( cnMatches[i] )));
}
edaTrain$CabinLetter <- as.factor(cabinLetter);
edaTrain$CabinNumber <- cabinNumber;
ggplot( edaTrain, aes(x=CabinNumber,y=Survived,color=Survived ) ) +
geom_point( shape=1,position=position_jitter(height=0.25)) +
ggtitle("Survivability by Cabin Number") +
xlab("Cabin Number") +
ylab("Survived");
ggplot(subset(edaTrain, !is.na(cabinLetter)), aes(x = CabinLetter, fill = as.factor(Survived))) +
geom_bar() +
ggtitle("Survivability by Ticket Letter") +
xlab("Cabin Letter") +
ylab("Total Count") +
labs(fill = "Survived");
tbl = table( edaTrain$Survived, edaTrain$CabinLetter);
tbl
chisq.test(tbl);
edaTrain$CabinAssignment[ edaTrain$Cabin != "" ] <- "Assigned";
edaTrain$CabinAssignment[ edaTrain$Cabin == "" ] <- "Unassigned";
data_combined$CabinAssignment[ data_combined$Cabin != "" ] <- "Assigned";
data_combined$CabinAssignment[ data_combined$Cabin == "" ] <- "Unassigned";
ggplot(edaTrain, aes(x=CabinAssignment, fill=factor(Survived))) +
geom_bar() +
facet_wrap(~Pclass) +
ggtitle("Pclass") +
xlab("Cabin Assignment") +
ylab("Total Count") +
labs(fill="Survived");
knitr::kable( train[train$Embarked == "",], format="markdown", longtable=TRUE);
ggplot( edaTrain, aes(x=factor(Pclass),fill=factor(Survived)))+
geom_bar() +
facet_wrap(~Embarked) +
ggtitle("Survivability by Port of Embarkation and Passenger Class") +
xlab("Passenger Class") +
ylab("Count") +
labs(fill="Survived");
knitr::kable( data_combined[ data_combined$Ticket == "W./C. 6608", ], format="markdown", longtable=TRUE)
# Mr. William Neal Ford
data_combined[ data_combined$PassengerId ==  87,"SibSp"] = 3;  # From 1
data_combined[ data_combined$PassengerId ==  87,"Parch"] = 1;  # From 3
# Miss. Robina Maggie Ford
data_combined[ data_combined$PassengerId == 148,"SibSp"] = 3;  # From 2
data_combined[ data_combined$PassengerId == 148,"Parch"] = 1;  # From 2
# Miss. Doolina Margaret Ford
data_combined[ data_combined$PassengerId == 437,"SibSp"] = 3;  # From 2
data_combined[ data_combined$PassengerId == 437,"Parch"] = 1;  # From 2
# Mrs. Edward Ford
data_combined[ data_combined$PassengerId == 737,"SibSp"] = 1;  # From 1; Note: sister is Mrs. Eliza Johnston
data_combined[ data_combined$PassengerId == 737,"Parch"] = 4;  # From 3
# Mr. Edward Watson Ford
data_combined[ data_combined$PassengerId == 1059,"SibSp"] = 3;  # From 2
data_combined[ data_combined$PassengerId == 1059,"Parch"] = 1;  # From 2
knitr::kable( data_combined[ data_combined$Ticket == "W./C. 6608", ], format="markdown", longtable=TRUE)
knitr::kable( data_combined[ data_combined$Ticket == "C.A. 2673", ], format="markdown", longtable=TRUE)
# Master. Eugene Joseph Abbott
data_combined[ data_combined$PassengerId == 1284,"SibSp"] = 1;  # From 0
data_combined[ data_combined$PassengerId == 1284,"Parch"] = 1;  # From 2
# Mrs. Stanton (Rosa Hunt)
data_combined[ data_combined$PassengerId == 280,"SibSp"] = 0;  # From 1
data_combined[ data_combined$PassengerId == 280,"Parch"] = 2;  # From 1
knitr::kable( data_combined[ data_combined$Ticket == "C.A. 2673", ], format="markdown", longtable=TRUE)
train$Survived = as.factor(train$Survived);
train$Pclass = as.ordered(train$Pclass);
data_combined[62,"Embarked"] = as.factor("S");
data_combined[830,"Embarked"] = as.factor("S");
knitr::kable( data_combined[1044,], format="markdown", longtable=TRUE)
ticketChar = as.character( data_combined$Ticket );
numPassengers = nrow( data_combined );
data_combined$NumPassengersOnTicket = 1;
for (i in 1:numPassengers ){
thisTicket = as.character( data_combined[i,"Ticket"] );
idxPeople = which( thisTicket == ticketChar );
numPeople = length( idxPeople );
data_combined$NumPassengersOnTicket[i] = numPeople;
}
# now constrain to those that have just 1 person on the ticket, as passenger 1044
singlePassengers = data_combined$NumPassengersOnTicket == 1;
embarkedS = data_combined$Embarked == 'S';
unassignedCabins = data_combined$CabinAssignment == 'Unassigned';
pClass3 = data_combined$Pclass == 3;
similarPassengers = which( singlePassengers & embarkedS & unassignedCabins & pClass3 );
similarPassengersFareData = data_combined[similarPassengers,];  # include all columns but the one we have no Fare info
similarPassengersFareData = similarPassengersFareData[ similarPassengersFareData$PassengerId != 1044,];  # include all columns but the one we have no Fare info
medianFare = median( similarPassengersFareData$Fare );
data_combined[1044,"Fare"] = medianFare;
hist(similarPassengersFareData$Fare, xlab = "Fare", ylab = "Passengers", main = "Fare of Similar Passengers");
summary( similarPassengersFareData$Fare );
data_combined$FixedAge = data_combined$Age;
passenger_names = as.character(data_combined$Name);
num_commas = unname(sapply( passenger_names, str_count, ","));
all_commas = assert_that( all( num_commas == 1 ) );  # Make sure each row has a comma
# Now, extract titles.  Split on comma and take the tail end of the character string
surnames = sapply( strsplit(as.character(passenger_names), ","), head, 1);
data_combined$Surname = as.factor( surnames );
given_name_string = sapply( strsplit(as.character(passenger_names), ","), tail, 1);
# Remove leading whitespace, if any
given_name_string = trimws( given_name_string, "left");
# To extract the title from the Name character string, split each string
name_tokens = strsplit( given_name_string, "\\s+");
# Exract first token as the title
titles = lapply(name_tokens,"[[",1);
given_names = lapply(name_tokens,"[[",2);
data_combined$GivenName = as.factor( unlist( given_names ) );
title_regs = regexpr( "[\\w+]+\\.", given_name_string, perl=TRUE );
re_titles = regmatches( given_name_string, title_regs );
data_combined$Title = as.factor( unlist( re_titles ));
# The set of titles that have missing age values
ageNA = is.na( data_combined$Age );
titleNA = data_combined$Title[ageNA];
# The set of titles that have missing age values
data_combined$AgeTitle = data_combined$Title;
data_combined$AgeTitle[ which( data_combined$Title == "Ms." & ageNA )] = as.factor( "Mrs." );
age_lm = lm( Age~AgeTitle, data=data_combined);
missingAgeIndices = which( is.na( data_combined$Age ) );
missingTitles = data_combined[missingAgeIndices,"AgeTitle"];
missingCount = table( missingTitles );
summary( missingTitles )
# model is simple: use the passenger's title (i.e., Mr., Master., Mrs.) to determine age
# May want to better this by using age of parents (if travelling with parents), age of siblings, spouse, etc.
age_lm = lm( Age~AgeTitle, data=data_combined);
missingAges = predict( age_lm, data_combined[missingAgeIndices,]);
data_combined[missingAgeIndices,"FixedAge"] = missingAges;
coeffs = coefficients( age_lm );
coeffNames = names(coeffs);
coeffValues = unname(coeffs);
# find (Intercept)
idxIntercept = match( "(Intercept)", coeffNames );
interceptValue = coeffValues[idxIntercept];
allOtherCoeffIndices = setdiff(1:length(coeffNames),idxIntercept);
allOtherCoeffValues = coeffValues[allOtherCoeffIndices];
titleAges = interceptValue + allOtherCoeffValues;
names(titleAges) =  gsub( "AgeTitle", "", coeffNames[allOtherCoeffIndices] );
knitr::kable( bind_rows(titleAges), format="markdown", longtable=TRUE)
passenger_names = as.character(data_combined$Name);
head(passenger_names);
num_commas = unname(sapply( passenger_names, str_count, ","));
all_commas = assert_that( all( num_commas == 1 ) );  # Make sure each row has a comma
# Now, extract titles.  Split on comma and take the tail end of the character string
surnames = sapply( strsplit(as.character(passenger_names), ","), head, 1);
data_combined$Surname = as.factor( surnames );
given_name_string = sapply( strsplit(as.character(passenger_names), ","), tail, 1);
# Remove leading whitespace, if any
given_name_string = trimws( given_name_string, "left");
# To extract the title from the Name character string, split each string
name_tokens = strsplit( given_name_string, "\\s+");
# Exract first token as the title
titles = lapply(name_tokens,"[[",1);
given_names = lapply(name_tokens,"[[",2);
data_combined$GivenName = as.factor( unlist( given_names ) );
summary( data_combined$Title );
data_combined[ which( data_combined$Title == "the" ), ]
title_regs = regexpr( "[\\w+]+\\.", given_name_string, perl=TRUE );
re_titles = regmatches( given_name_string, title_regs );
data_combined$Title = as.factor( unlist( re_titles ));
summary( data_combined$Title );
# The set of titles that have missing age values
ageNA = is.na( data_combined$Age );
titleNA = data_combined$Title[ageNA];
summary( titleNA );
# The set of titles that have missing age values
data_combined$AgeTitle = data_combined$Title;
data_combined$AgeTitle[ which( data_combined$Title == "Ms." & ageNA )] = as.factor( "Mrs." );
summary( data_combined$AgeTitle );
numParents = integer( nrow( data_combined ) );
numChildren = integer( nrow( data_combined ) );
MAX_CHILD_AGE = 14;
# Find all Parch > 0
posParch = data_combined$Parch > 0;
idxParch = which( posParch );
counter = 0;
numCases = length( idxParch );
for (thisRow in idxParch){
sibsp = data_combined[thisRow,"Sibsp"];
# if sibsp > 1, then the passenger is travelling with siblings (and therefore, likely parents)
counter = counter + 1;
numParch = data_combined[thisRow,"Parch"];
thisSurname = data_combined[thisRow,"Surname"];
thisTicket = data_combined[thisRow,"Ticket"];
thisTitle = as.character( data_combined[thisRow,"Title"] );
thisAge = data_combined[thisRow,"Age"];
if ( (thisTitle == "Master.") || (thisTitle == "Miss.") ){
# if this passenger is a "Master." or Miss. and numParch <= 2, he/she must be someone's child
numParents[thisRow] = numParch;
#next;
}
if (!is.na( thisAge ) && thisAge <= MAX_CHILD_AGE ){
# if this passenger is young, declare they cannot be parents, must be a child
numParents[thisRow] = numParch;
#next;
}
# get passenger rows on same ticket
sameTickets = data_combined$Ticket == thisTicket;
sameSurnames = data_combined$Surname == thisSurname;
sameSurnameSameTicket = sameTickets & sameSurnames & posParch;
ticketTitles = as.character( data_combined[ sameSurnameSameTicket, "Title"] );
ticketParches = data_combined[ sameSurnameSameTicket, "Parch"];
# now, look for passengers with the same surname on the ticket and check their titles and ages
numSame = length( sameSurnameSameTicket );
ages = sort( data_combined[sameSurnameSameTicket,"Age"] );
thisAgePos = which( thisAge == ages )[1];  # find index of thisAge in sorted ages
gaps = diff( ages );
numGenerationalGaps = length( which( gaps > MAX_CHILD_AGE) );
if ( numGenerationalGaps == 0 ){
if ( !is.na( thisAge )){
if ( ( thisAge >= 40 ) || (thisTitle == "Mrs." ) ){
numChildren[thisRow] = numParch;
}
else if (numParch > 2 ){
numChildren[thisRow] = numParch;
}
else{
numParents[thisRow] = numParch;
}
}
else{
# no age information. If travelling with "kids", and title isn't a kid, then parent
if ( ! ( thisTitle %in% c("Master.","Miss.") ) ){
if( any( c("Master.","Miss.") %in% ticketTitles ) ){
# now, if there are two Mr. in this group, we need to choose the real father
# If there are three or more children, then Parch will be greater than 2 and
# will indicate this is the father.  Else, it will be a child
if( thisTitle == "Mr."){
maxParches = max( ticketParches );
if ( ( maxParches > 2 ) && ( maxParches == numParch ) ){
numChildren[thisRow] = numParch;
}
else{
numParents[thisRow] = numParch;
}
}
else{
numChildren[thisRow] = numParch;
}
}
else{
# all we have is a non Mr. or Miss. title.  Make them a child
numChildren[thisRow] = numParch;
}
}
else{
numParents[thisRow] = numParch;
}
}
}
else{
if ( !is.na(thisAge) ){  # use age in comparison to generation gap to classify kids/parents
maxGapPos = which.max( gaps ) + 0.5;  # the 0.5 puts it in the middle of the kids/parents
if ( thisAgePos < maxGapPos ){
numParents[thisRow] = numParch;
}
else{
numChildren[thisRow] = numParch;
}
}
else{
# no age info, have to go with titles
}
}
totalParch = numParents[thisRow] + numChildren[thisRow];
if ( totalParch != numParch ){
stop( "Number of Parents/Children assigned (", totalParch, ") does not equal the Parch variable (", numParch, ") for passenger ", data_combined[thisRow,"PassengerId"], "\n");
}
data_combined$NumParents = numParents;
data_combined$NumChildren = numChildren;
}
numSiblings = integer( nrow( data_combined ) );
numSpouses = integer( nrow( data_combined ) );
MAX_CHILD_AGE = 14;
posSibSp = data_combined$SibSp > 0;
idxSibSp = which( posSibSp );
counter = 0;
numCases = length( idxSibSp );
for (thisRow in idxSibSp){
counter = counter + 1;
numSibSp = data_combined[thisRow,"SibSp"];
numParch = data_combined[thisRow,"Parch"];
thisSurname = data_combined[thisRow,"Surname"];
thisTicket = data_combined[thisRow,"Ticket"];
thisTitle = as.character( data_combined[thisRow,"Title"] );
thisAge = data_combined[thisRow,"Age"];
thisSex = as.character( data_combined[thisRow,"Sex"] );
thisGivenName = as.character( data_combined[thisRow,"GivenName"] );
thisPassengerId = data_combined[thisRow,"PassengerId"];
if ( (thisTitle == "Master.") || (thisTitle == "Miss.") ){
# if this passenger is a "Master." or Miss., this passenger is not married, so must be spouse
numSiblings[thisRow] = numSibSp;
next;
}
if (!is.na( thisAge ) && thisAge <= 10 ){
# if this passenger is young, declare they cannot be parents, must be a child
numSiblings[thisRow] = numSibSp;
next;
}
# get passenger rows on same ticket
sameTickets = data_combined$Ticket == thisTicket;
sameSurnames = data_combined$Surname == thisSurname;
sameSurnameSameTicket = sameTickets & sameSurnames & posSibSp;
# if married, look for spouse on the same ticket
# get given names on same ticket
same_ticket_rows = data_combined[which(sameSurnameSameTicket),];
given_names = as.character( same_ticket_rows$GivenName );
titles = as.character( same_ticket_rows$Title );
sexes = as.character( same_ticket_rows$Sex );
passengerIds = same_ticket_rows$PassengerId;
master_mask = ( titles != "Master." );
sex_mask = ( sexes != thisSex );  # opposite sex marriage
miss_mask = ( titles != "Miss." );
this_mask = ( passengerIds != thisPassengerId );
idxMatch = which( ( thisGivenName == given_names ) & master_mask & sex_mask & miss_mask & this_mask);
if ( length( idxMatch ) == 1 ){
numSpouses[thisRow] = 1;
next;
}
ticketTitles = as.character( data_combined[ sameSurnameSameTicket, "Title"] );
ticketParches = data_combined[ sameSurnameSameTicket, "Parch"];
# now, look for passengers with the same surname on the ticket and check their titles and ages
numSame = length( sameSurnameSameTicket );
ages = sort( data_combined[sameSurnameSameTicket,"Age"] );
thisAgePos = which( thisAge == ages )[1];  # find index of thisAge in sorted ages
gaps = diff( ages );
numGenerationalGaps = length( which( gaps > MAX_CHILD_AGE) );
}
# do some manual corrections
numSiblings[168] = 0;  # Mrs. William Skoog
numSpouses[168] = 1;  # Mrs. William Skoog
numSiblings[361] = 0;  # Mr. Wilhelm Skoog
numSpouses[361] = 1;  # Mr. Wilhelm Skoog
numSiblings[679] = 0;  # Mrs. Frederick Goodwin
numSpouses[679] = 1;  # Mrs. Frederick Goodwin
numSiblings[1031] = 0;  # Mr. Charles Frederick Goodwin
numSpouses[1031] = 1;  # Mr. Charles Frederick Goodwin
numSiblings[557] = 0;  # Lady. Duff Gordon
numSpouses[557] = 1;  # Lady. Duff Gordon
numSiblings[600] = 0;  # Sir. Duff Gordon
numSpouses[600] = 1;  # Sir. Duff Gordon
numSiblings[746] = 0;  # Capt. Edward Gifford Crosby
numSpouses[746] = 1;  # Capt. Edward Gifford Crosby
numSiblings[1197] = 0;  # Mrs. Edward Gifford Crosby
numSpouses[1197] = 1;  # Mrs. Edward Gifford Crosby
numSiblings[1059] = 3;  # Mr. Edward Watson Ford
numSpouses[1059] = 0;  # Mr. Edward Watson Ford
counter = 0;
for (thisRow in idxSibSp){
counter = counter + 1;
numSibSp = data_combined[thisRow,"SibSp"];
numParch = data_combined[thisRow,"Parch"];
thisSurname = data_combined[thisRow,"Surname"];
thisTicket = data_combined[thisRow,"Ticket"];
thisTitle = as.character( data_combined[thisRow,"Title"] );
thisAge = data_combined[thisRow,"Age"];
thisSex = as.character( data_combined[thisRow,"Sex"] );
thisGivenName = as.character( data_combined[thisRow,"GivenName"] );
thisPassengerId = data_combined[thisRow,"PassengerId"];
numSiblings[thisRow] = numSibSp - numSpouses[thisRow];
}
data_combined$Spouses = numSpouses;
data_combined$Siblings = numSiblings;
ticketChar = as.character( data_combined$Ticket );
uniqueTickets = unique( ticketChar );
farePerPassenger = data_combined$Fare;
for (i in 1:length(uniqueTickets) ){
thisTicket = uniqueTickets[i];
idxPeople = which( ticketChar == thisTicket );
theseFares = data_combined[idxPeople,"Fare"];
#if ( !all( theseFares == theseFares[1] ) ){
#    cat( thisTicket )
#}
# should only be a single fare
numPeople = length( idxPeople );
farePerPassenger[idxPeople] = theseFares[1]/numPeople;
}
data_combined$FarePerPassenger = farePerPassenger;
knitr::opts_chunk$set(echo = TRUE)
MAX_HOURS = 10;
library( assertthat );
data_combined$pclass <- as.factor(data_combined$Pclass);
# A bit about R data types (e.g., factors)
summary(data_combined );
numPassengers = length(train$Survived);
died = sum( train$Survived == 0);
survived = sum( train$Survived == 1);
#assert_that( died + survived == numPassengers);
mean_survived = survived/numPassengers;
cat( "Of ", numPassengers, " passengers, ", died, " died and ", survived, " survived.\nMean Survivability = ", survived/numPassengers );
# Time strip
nullModel = data.frame(PassengerId=test$PassengerId, Survived=0);
write.csv( nullModel, "titanicNullModel.csv", row.names=FALSE, quote=FALSE );
hours = 1;
par(mfrow=c(2,1));
barplot( hours, width=0.9, main="Time", xlab="hours", ylim=c(0,1), xlim=c(0,MAX_HOURS), horiz=TRUE );
#bp = ggplot(data=hours,aes(x=hours,y=1)) + geom_bar(stat="identity") + coord_flip();
#bp
### Bias-Variance Strip
train
nrow(train)
train$Sex
train$Sex == 'female'
which( train$Sex == 'female' )
length( which( train$Sex == 'female' ) )
length( which( train$Sex == 'male' ) )
length( femaleIndices & train$Survived == 1)
femaleIndices = which( train$Sex == 'female' );
maleIndices = which( train$Sex == 'male' );
numFemales = length( femaleIndices );
numMales = length( maleIndices );
length( femaleIndices & train$Survived == 1)
length( femaleIndices & which( train$Survived == 1 ))
length( intersect( femaleIndices, which( train$Survived == 1 )))
proportionFemaleSurvival = length( intersect( femaleIndices, which( train$Survived == 1)))/numFemales;
proportionFemaleSurvival
proportionMaleSurvival = length( intersect( maleIndices, which( train$Survived == 0)))/numMales;
proportionMaleSurvival
891-342
length( intersect( maleIndices, which( train$Survived == 0)))
(468+ 233)/891
train
data_combined
?subset
subset( data_combined, PassengerId < 892)
femaleIndices = which( train$Sex == 'female' );
newTrain = subset( data_combined, PassengerId <= nrow(train) );
childIndices = which( newTrain$FixedAge < 15 );
womenOrChildren = union( femaleIndices, childIndices );
maleIndices = setdiff( 1:nrow(train), womenOrChildren );
womenOrChildrenSurvived = which( train[ womenOrChildren, "Survived"] == 1 );
menDied = which( train[ maleIndices, "Survived"] == 0);
numFemales = length( femaleIndices );
numMales = length( maleIndices );
proportionCorrect = ( length(womenOrChildrenSurvived) + length(menDied))/nrow(train);
proportionCorrect
femaleIndices = which( test$Sex == 'female' );
newTest = subset( data_combined, PassengerId > nrow(train) );
childIndices = which( newTest$FixedAge < 15 );
womenOrChildren = union( femaleIndices, childIndices );
maleIndices = setdiff( 1:nrow(newTest), womenOrChildren );
womenOrChildrenSurvived = which( newTest[ womenOrChildren, "Survived"] == 1 );
menDied = which( train[ maleIndices, "Survived"] == 0);
numFemales = length( femaleIndices );
numMales = length( maleIndices );
testProportionCorrect = ( length(womenOrChildrenSurvived) + length(menDied))/nrow(newTest);
testProportionCorrect
nullModel
# start with all perished model, then set women and children to survived
womenAndChildrenFirstModel = data.frame(PassengerId=test$PassengerId, Survived=0);
femaleIndices = which( test$Sex == 'female' );
newTest = subset( data_combined, PassengerId > nrow(train) );
childIndices = which( newTest$FixedAge < 15 );
womenOrChildren = union( femaleIndices, childIndices );
womenAndChildrenFirstModel[womenOrChildren,"Survived"] = 1;
write.csv( womenAndChildrenFirstModel, "womenAndChildrenFirstModel.csv", row.names=FALSE, quote=FALSE );
names(newTrain)
pClass
newTrain$Pclass
newTrain$pClass
names(newTrain)
newTrain$pclass
diff( newTrain$Pclass, newTrain$pclass)
summary( newTrain$Pclass)
summary( newTrain$pclass)
summary( newTrain$pclass)
newTrain$pclass
newTrain$Pclass
data_combined
newTrain$Pclass
newTrain$pclass
glm.fit = glm( Survived~pclass+Sex+FixedAge+FarePerPassenger+Title+CabinAssignment+Embarked+as.factor(NumPassengersOnTicket)+as.factor(NumParents)+as.factor(NumChildren)+as.factor(Spouses)+as.factor(Siblings),data=newTrain,family=binomial);
regsubsets( Survived~pclass+Sex+FixedAge+FarePerPassenger+Title+CabinAssignment+Embarked+as.factor(NumPassengersOnTicket)+as.factor(NumParents)+as.factor(NumChildren)+as.factor(Spouses)+as.factor(Siblings),data=newTrain,family=binomial);
library(leaps)
install.package("leaps")
install.packages("leaps")
library(leaps)
regsubsets( Survived~pclass+Sex+FixedAge+FarePerPassenger+Title+CabinAssignment+Embarked+as.factor(NumPassengersOnTicket)+as.factor(NumParents)+as.factor(NumChildren)+as.factor(Spouses)+as.factor(Siblings),data=newTrain,family=binomial);
regsubsets( Survived~pclass+Sex+FixedAge+FarePerPassenger+Title+CabinAssignment+Embarked+as.factor(NumPassengersOnTicket)+as.factor(NumParents)+as.factor(NumChildren)+as.factor(Spouses)+as.factor(Siblings),data=newTrain);
rs = regsubsets( Survived~pclass+Sex+FixedAge+FarePerPassenger+Title+CabinAssignment+Embarked+as.factor(NumPassengersOnTicket)+as.factor(NumParents)+as.factor(NumChildren)+as.factor(Spouses)+as.factor(Siblings),data=newTrain);
summary(rs)
summary(glm.fit)
rs = regsubsets( Survived~pclass+Sex+FixedAge+FarePerPassenger+Title+CabinAssignment+Embarked+NumPassengersOnTicket+NumParents+NumChildren+Spouses+Siblings,data=newTrain);
glm.fit = glm( Survived~pclass+Sex+FixedAge+FarePerPassenger+Title+CabinAssignment+Embarked+NumPassengersOnTicket+NumParents+NumChildren+Spouses+Siblings,data=newTrain,family=binomial);
summary(glm.fit)
predict( )
predict( glm.fit, data=test)
lrpred = predict( glm.fit, data=test)
plot( lrpred )
hist( lrpred )
summary(glm.fit)
lrpred = predict( glm.fit, data=test, type="response")
summary(lrpred)
lrpred
plot(lrpred)
hist(lrpred)
median(lrpred)
length( lrpred > 0.5)
length( which( lrpred > 0.5) )
324/891
test
test$Name
exit()
quit()
